generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?   // ✅ Ensure `password` field exists
  // emailVerified DateTime?
  // image         String?
  accounts      Account[]
  sessions      Session[]
  tests         Test[]
  attempts      TestAttempt[]
} 

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Test {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  duration    Int          // in minutes
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String       @db.ObjectId
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions   Question[]
  attempts    TestAttempt[]
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  options       String[]
  correctAnswer Int
  testId        String   @db.ObjectId // ✅ Fix relation field name
  test          Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model TestAttempt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  score       Int
  answers     Int[]
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  completedAt DateTime?
  userId      String   @db.ObjectId
  testId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  test        Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
}
